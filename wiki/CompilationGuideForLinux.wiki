#summary A guide to compiling pcsx2 on Linux.

= *only 32bits OS is supported* =
Recent Ubuntu/Debian support the installation of 32 bits library into your 64 bits OS (aka multi-arch). Unfortunately older version doesn't provide any reliable way to run PCSX2. In this case, the only sane solution is the installation of a 32 bits chroot environment, and run PCSX2 from that.

*64 bits users* please read [ChrootAnd64bStatusLinux pcsx2 status on 64 bits.]


= Index =

  # [CompilationGuideForLinux#Introduction  Introduction]
  # [CompilationGuideForLinux#Using_cmake  Cmake]
  # [CompilationGuideForLinux#Package_build_system  Create debian/ubuntu package]
  # [CompilationGuideForLinux#Install_pcsx2_with_ubuntu_ppa  Install with Ubuntu ppa]
  # [CompilationGuideForLinux# Install_pcsx2_with_archlinux_aur Install with Archlinux AUR]


If you want download and build older 0.9.6 editions of PCSX2, see the [LegacyAutomakeGuide  Guide for Building 0.9.6 (r1762 and prior) via Automake].
  
----

= Introduction =

This is intended to give you an idea of how to compile PCSX2 from svn in Linux. Some of the steps may be different on some versions of Linux, and this is not generally supported by the PCSX2 team. If you have issues following this guide, I'd recommend going through this thread for help:
http://forums.pcsx2.net/Thread-Linux-Compile-Guide-and-Support

Note: This is still a rough draft, and subject to change.

----

= Cmake build system =

=== Debian build dependencies for future version 1.0 and later ===

 # build system
   * gcc-4.5, gcc-4.5-multilib
   * g++-4.5, g++-4.5-multilib
   * cmake
 # 32 bits libraries on x86
   * libaio-dev:i386
   * libasound2-dev:i386
   * libbz2-dev:i386
   * libcg:i386
   * libcggl:i386
   * libegl1-mesa-dev:i386
   * libgl1-mesa-dev:i386
   * libglew-dev:i386
   * libglu1-mesa-dev:i386
   * libgtk2.0-dev:i386
   * libjpeg-dev:i386
   * libsdl1.2-dev:i386
   * libsoundtouch-dev:i386
   * libsparsehash-dev
   * libwxbase2.8-dev:i386
   * libwxgtk2.8-dev:i386
   * libx11-dev:i386
   * nvidia-cg-dev:i386
   * nvidia-cg-toolkit
   * portaudio19-dev:i386
   * zlib1g-dev:i386

=== Archlinux build dependencies for version 1.0 and later ===
Some of the required packages to build PCSX2 are available only in [http://aur.archlinux.org/ AUR unsupported].
So, the use of an [https://wiki.archlinux.org/index.php/AUR_Helpers AUR helper] (ex: yaourt) is highly advised!

 # build system
   * gcc, gcc-multilib
   * cmake
 # 32 bits libraries on x86
   * alsa-lib
   * bzip2
   * glew
   * wxgtk
   * libjpeg
   * portaudio
   * sdl
   * google-sparsehash
   * nvidia-cg-toolkit
 # 32 bits libraries on x86_64
{{{
# update /etc/pacman.conf
[Multilib]
Include = /etc/pacman.d/mirrorlist
# Refresh package
pacman -Sy
}}}
   * lib32-alsa-lib
   * lib32-bzip2 
   * lib32-libjpeg 
   * lib32-glew 
   * lib32-nvidia-cg-toolkit
   * lib32-portaudio
   * lib32-sdl
   * lib32-wxgtk
   * Activate multilib /etc/pacman.conf

=== Fedora build dependencies ===
  You need to enable both rpm fusion repositories.

  # Package list (probably imcomplete)
    * cmake
    * freetype-devel
    * zlib-devel
    * gtk2-devel
    * alsa-lib-devel
    * bzip2-devel
    * libjpeg-turbo`*`
    * wxGTK-devel
    * Cg
    * libCg
    * portaudio
    * portaudio-devel
    * sparsehash-devel
    * SDL-devel

=== Using cmake ===
 ==== Basic mode: straightforward compilation ====
  * Use build.sh script
    * You can see the option with `build.sh -help`

 ==== Expert mode: Cmake build parameters ====

  * Basic parameters:
     * Use Release/Devel/Debug       : -DCMAKE_BUILD_TYPE=Release|Devel|Debug
        # Release: Best in speed, but provides little or no debug/crash info.
        # Devel: Adds detailed trace logging abilities, but still lacks debug/crash info.  
        # Debug: No compiler optimizations. Very good for debug/crash info but also very slooowww.
     * Enable/disable the stipping   : -DCMAKE_BUILD_STRIP=TRUE|FALSE
        # TRUE: Remove debugging information.
        # FALSE: Keep symbols. Better for debug. (recommended since it should not have any impact on speed)

  * Expert parameters (not supported, the best is to use the default options):
     * Tune C flags                   : -DUSER_CMAKE_C_FLAGS:STRING="cflags"
     * Tune C++ flags                 : -DUSER_CMAKE_CXX_FLAGS:STRING="cxxflags"
     * Tune linker flags              : -DUSER_CMAKE_LD_FLAGS:STRING="ldflags"
     * Use GLSL (experimental) for shading instead of nvidia cg (zzogl only) : -DGLSL_API=TRUE
     * Use EGL (experimental) to replace GLX (zzogl only) : -DEGL_API=TRUE
     * update po (translation file)   : -DCMAKE_BUILD_PO=TRUE
     * Follow XDG standard            : -DXDG_STD=TRUE

 * Expert options for package creation
     * Enable package mode : -DPACKAGE_MODE=TRUE
     * Plugin install path in package mode: -DPLUGIN_DIR="/usr/lib/pcsx2"
     * GameDB install path in package mode: -DGAMEINDEX_DIR="/usr/share/games/pcsx2"
     * GLSL shader install directory: -DGLSL_SHADER_DIR="/usr/share/games/pcsx2"

 ==== Running Cmake to generate the makefile: ====
  * It is advised to use a build method that place build files outside the PCSX2 sources dirs, as it makes it easier to delete all cmake stuff:
    * mkdir my_build_dir
    * cd my_build_dir
    * cmake ../CMakeLists.txt "User Options see above"

 ==== Do the compilation: ====
  * make
 
 ==== Install files: ====
  * make install

 === Clean temporary files ===
  * rm -fr my_build_dir


=== Reporting Cmake bugs ===
All distributions and configurations were not tested. In case you encounter a cmake bug that is really a cmake issue, you can report it. Please provide the following information.
  # Linux distribution and the current kernel version (32 bits or 64 bits)
  # The cmake commands. For example: cmake CMakeLists.txt
  # All the output of cmake. Something like this is good:
{{{
-- The C compiler identification is GNU
-- The CXX compiler identification is GNU
-- Check for working C compiler: /usr/bin/gcc
-- Check for working C compiler: /usr/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found GTK2_GTK: /usr/lib/libgtk-x11-2.0.so
-- Looking for XOpenDisplay in /usr/lib/libX11.so;/usr/lib/libXext.so
-- Looking for XOpenDisplay in /usr/lib/libX11.so;/usr/lib/libXext.so - found
-- Looking for gethostbyname
-- Looking for gethostbyname - found
-- Looking for connect
-- Looking for connect - found
-- Looking for remove
-- Looking for remove - found
-- Looking for shmat
-- Looking for shmat - found
-- Looking for IceConnectionNumber in ICE
-- Looking for IceConnectionNumber in ICE - found
-- Found X11: /usr/lib/libX11.so
-- Found ALSA: /usr/lib/libasound.so
-- Found BZip2: /usr/lib/libbz2.so
-- Looking for BZ2_bzCompressInit in /usr/lib/libbz2.so
-- Looking for BZ2_bzCompressInit in /usr/lib/libbz2.so - found
-- Looking for include files CMAKE_HAVE_PTHREAD_H
-- Looking for include files CMAKE_HAVE_PTHREAD_H - found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE
-- Found wxWidgets: TRUE
-- Found ZLIB: /usr/lib/libz.so
-- Found Cg: /usr/lib/libCg.so;/usr/lib/libCgGL.so
-- Found PortAudio: /usr/lib/libportaudio.so
-- Found SoundTouch: /usr/lib/libSoundTouch.so
-- Configuring done
-- Generating done
-- Build files have been written to: /mnt/playstation/emulateur/package/pcsx2.snapshot-4810

}}}

----
= Package build system =

=== Build a debian/ubuntu package ===
* NOT SUPPORTED * : Building a package is difficult. For non-expert users, I advise you to compile PCSX2 with [CompilationGuideForLinux#Using_cmake cmake].

For the purpose of the example, I use the version r4810. It is advice to use the latest version.

 ==== Install some additional package ====
     * dpkg-dev
     * quilt
     * debhelper
     * fakeroot

 ==== Get a source tarball ====
  First you need to create a tarball for the source package. A script is provided to do the job.
   # `svn export http://pcsx2.googlecode.com/svn/trunk/debian_unofficial/create_pcsx2_tarball_from_svn_repository.sh`
   # `./create_pcsx2_tarball_from_svn_repository.sh -r 5400`
   # Check that you have a pcsx2.snapshot_5400.orig.tar.gz tarball.
     
 ==== Update debian information ====
   Next step, add debian datas.
     # `tar -xzf pcsx2.snapshot_5400.orig.tar.gz`
     # `cd pcsx2.snapshot-5400`
     # `cp -r debian_unofficial debian`
     # Edit the file `debian/changelog` to change the origin version in the first line. You must also change the distribution codename. For example rev 5400 for debian unstable : "pcsx2.snapshot *(5400-1)* *unstable*; urgency=low"

 ==== Build the package ====
   Everythings is clean, we can build the package without sign-it (-us -uc).
     # You can tune the build with the variable DEB_BUILD_OPTIONS. For example, disable optimization and use your quad-core cpu : DEB_BUILD_OPTIONS="parallel=4 noopt"
     # dpkg-buildpackage -rfakeroot -us -uc
  
=== Additional note for ubuntu ppa ===
     # Build the source package
        * New version: `dpkg-buildpackage -S -sa`
        * Update revision: `dpkg-buildpackage -S -sd`

----

= Install pcsx2 with ubuntu ppa =
=== Note ===
    Pcsx2 provides some Ubuntu's package through ppa. It is only available on *32bits* OS. Moreover package are based on recent svn snapshot that are broken from time to time. [https://launchpad.net/~gregory-hainaut/+archive/pcsx2.official.ppa Go to ppa repository]. 

    With the new multiarch capability, you can install a 32 bits ppa into a 64bits Ubuntu. Warning you need at least ubuntu 12.04 (precise).


=== OS supported ===
    * 32 bits ubuntu 11.10 (oneiric)
    * ubuntu 12.04 (precise)

=== Add pcsx2 ppa on your system ===
    * open a terminal
    * sudo add-apt-repository ppa:gregory-hainaut/pcsx2.official.ppa
 
=== Install the package on your system ===
    * Main package
      * pcsx2-unstable
    * Debug package
      * pcsx2-unstable-dbg

----

= Install pcsx2 with archlinux aur =
=== Note ===
  On behalf of PCSX2 dev team, Josephg provides some AUR package based on recent svn snapshot. The way to go to easily install PCSX2 on Archlinux. [http://aur.archlinux.org/packages.php?ID=21899 Package details]

=== OS supported ===
   * 32 bits Archlinux
   * 64 bits Archlinux
 
=== Install the package on your system ===
   * pcsx2-svn