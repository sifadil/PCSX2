#summary A guide to compiling pcsx2 on Linux.

= *only 32bits OS is supported* =
Ia32libs is missing several 32bits libraries (at least in debian/ubuntu), and there is nothing PCSX2 can do about that. So do not expect to run PCSX2 on x64 Linux installs.  The only solution for you is to install a full 32bits chroot environment, and run PCSX2 from that.

*64 bits users* please read [ChrootAnd64bStatusLinux pcsx2 status on 64 bits.]


= Index =

  # [CompilationGuideForLinux#Introduction  Introduction]
  # [CompilationGuideForLinux#Using_cmake  Cmake]
  # [CompilationGuideForLinux#Package_build_system  Create debian/ubuntu package]
  # [CompilationGuideForLinux#Install_pcsx2_with_ubuntu_ppa  Install by ubuntu ppa]

If you want download and build older 0.9.6 editions of PCSX2, see the [LegacyAutomakeGuide  Guide for Building 0.9.6 (r1762 and prior) via Automake].
  
----

= Introduction =

This is intended to give you an idea of how to compile PCSX2 from svn in Linux. Some of the steps may be different on some versions of Linux, and this is not generally supported by the PCSX2 team. If you have issues following this guide, I'd recommend going through this thread for help:
http://forums.pcsx2.net/Thread-Linux-Compile-Guide-and-Support

Note: This is still a rough draft, and subject to change.

----

= Cmake build system =

==*Warning: this build system is experimental.  The following information is only a draft.*==

=== Debian build dependencies for future version 0.9.7 ===

 # build system
   * gcc-4.3, gcc-4.3-multilib
   * g++-4.3, g++-4.3-multilib
   * cmake
 # 32 bits libraries on x86
   * libasound2-dev
   * libbz2-dev
   * libgl1-mesa-dev
   * libglew1.5-dev
   * libglu1-mesa-dev
   * libgtk2.0-dev
   * libjpeg-dev
   * libsdl1.2-dev
   * libsoundtouch1-dev
   * libsparsehash-dev
   * libwxbase2.8-dev
   * libwxgtk2.8-dev
   * libx11-dev
   * nvidia-cg-toolkit
   * portaudio19-dev
   * zlib1g-dev
 # 32 bits libraries on x86_64 (*NOT SUPPORTED & IMCOMPLETE*)
   * ia32-libs
   * ia32-libs-gtk
   * lib32asound2-dev
   * lib32z1-dev

=== Using cmake ===

 ==== Build parameters that can be used: ====
  * Basic parameters:
     * Use Release/Devel/Debug       : -DCMAKE_BUILD_TYPE=Release|Devel|Debug
        # Release: Best in speed, but provides little or no debug/crash info.
        # Devel: Adds detailed trace logging abilities, but still lacks debug/crash info.  
        # Debug: No compiler optimizations. Very good for debug/crash info but also very slooowww.
     * Enable/disable the stipping   : -DCMAKE_BUILD_STRIP=TRUE|FALSE
        # TRUE: Remove debugging information.
        # FALSE: Keep symbols. Better for debug. (recommended since it should not have any impact on speed)
  * Expert parameters (not supported, the best is to use the default options):
     * Force all         internal lib : -DFORCE_INTERNAL_ALL=TRUE
     * Force soundtouch  internal lib : -DFORCE_INTERNAL_SOUNDTOUCH=TRUE
     * Force zlib        internal lib : -DFORCE_INTERNAL_ZLIB=TRUE
     * Tune C flags                   : -DUSER_CMAKE_C_FLAGS:STRING="cflags"
     * Tune C++ flags                 : -DUSER_CMAKE_CXX_FLAGS:STRING="cxxflags"
     * Tune linker flags              : -DUSER_CMAKE_LD_FLAGS:STRING="ldflags"

 ==== Running Cmake to generate the makefile: ====
  * It is advised to use a build method that place build files outside the PCSX2 sources dirs, as it makes it easier to delete all cmake stuff:
    * mkdir my_build
    * cd my_build
    * cmake ../CMakeLists.txt "User Options see above"
  * The 'pollute my source' method is:
    * cmake CMakeLists.txt "User Options see above"
  * *WARNING* In both cases you must call the CMakeLists.txt in the top directory.

 ==== Using the makefile to compile: ====
  * everything        : make
  * just pcsx2        : make pcsx2
  * just spu2x plugins: make spu2x
  * just a plugin     : make "plugin name"


=== Reporting Cmake bugs ===
All distributions and configurations were not tested. In case you encounter a cmake bug that is really a cmake issue, you can report it. Please provide the following information.
  # Linux distribution and the current kernel version (32 bits or 64 bits)
  # The cmake commands. For example: cmake CMakeLists.txt
  # All the output of cmake. Something like this is good:
{{{
-- The C compiler identification is GNU
-- The CXX compiler identification is GNU
-- Check for working C compiler: /usr/bin/gcc
-- Check for working C compiler: /usr/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found GTK2_GTK: /usr/lib/libgtk-x11-2.0.so
-- Looking for XOpenDisplay in /usr/lib/libX11.so;/usr/lib/libXext.so
-- Looking for XOpenDisplay in /usr/lib/libX11.so;/usr/lib/libXext.so - found
-- Looking for gethostbyname
-- Looking for gethostbyname - found
-- Looking for connect
-- Looking for connect - found
-- Looking for remove
-- Looking for remove - found
-- Looking for shmat
-- Looking for shmat - found
-- Looking for IceConnectionNumber in ICE
-- Looking for IceConnectionNumber in ICE - found
-- Found X11: /usr/lib/libX11.so
-- Found ALSA: /usr/lib/libasound.so
-- Found BZip2: /usr/lib/libbz2.so
-- Looking for BZ2_bzCompressInit in /usr/lib/libbz2.so
-- Looking for BZ2_bzCompressInit in /usr/lib/libbz2.so - found
-- Looking for include files CMAKE_HAVE_PTHREAD_H
-- Looking for include files CMAKE_HAVE_PTHREAD_H - found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE
-- Found wxWidgets: TRUE
-- Found ZLIB: /usr/lib/libz.so
-- Found A52: /usr/lib/liba52.so
-- Found Cg: /usr/lib/libCg.so;/usr/lib/libCgGL.so
-- Found PortAudio: /usr/lib/libportaudio.so
-- Found SoundTouch: /usr/lib/libSoundTouch.so
-- Configuring done
-- Generating done
-- Build files have been written to: /mnt/playstation/emulateur/package/pcsx2.snapshot-3201

}}}

----
= Package build system =

=== Build a debian/ubuntu package ===
* NOT SUPPORTED * : Building a package is difficult. For non-expert users, I advise you to compile PCSX2 with [CompilationGuideForLinux#Using_cmake cmake].

For the purpose of the example, I use the version r3210 but it can be replaced with any later version. However in this situation some debian patches can be broken.
 
 ==== Install some additional package ====
     * dpkg-dev
     * quilt
     * debhelper
     * fakeroot

 ==== Get a source tarball ====
  First you need to create a tarball for the source package. A script is provided to do the job.
   # `svn export http://pcsx2.googlecode.com/svn/trunk/debian_unofficial/create_pcsx2_tarball_from_svn_repository.sh`
   # `./create_pcsx2_tarball_from_svn_repository.sh 3210`
   # Check that you have a pcsx2.snapshot_3210.orig.tar.gz tarball.
     
 ==== Update debian information ====
   Next step, add debian datas.
     # `tar -xzf pcsx2.snapshot_3210.orig.tar.gz`
     # `cd pcsx2.snapshot-3210`
     # `cp -r debian_unofficial debian`
     # Edit the file `debian/changelog` to change the origin version in the first line. You must also change the distribution codename. For example rev 3210 for debian unstable : "pcsx2.snapshot *(3210-1)* *unstable*; urgency=low"
   Apply the debian patches and correct them if needed
     # If you have the fglrx (ati/amd) drivers installed, you must use a special rule file to build the binary package: `cp debian/rules_fglrx debian/rules`
     # Check environment variable : QUILT_PATCHES=debian/patches
     # `while quilt push ; do quilt refresh ; done`
   In case of failure
     * Solution 1: easiest way
        # Remove the patch in the debian/patches/series
        # Go back to previous step 2. To apply others patches
     * Solution 2: fix the patch.
        # quilt push -f (Look at the .rej file)
        # Fix the code (before do a quilt add <file changed>
        # quilt refresh (update the patch)
        # Go back to previous step 2. To apply others patches

 ==== Build the package ====
   Everythings is clean, we can build the package without sign-it (-us -uc).
     # You can tune the build with the variable DEB_BUILD_OPTIONS. For example, disable optimization and use your quad-core cpu : DEB_BUILD_OPTIONS="parallel=4 noopt"
     # dpkg-buildpackage -rfakeroot -us -uc
  
=== Additional note for ubuntu ppa ===
     # Use the 32 bits control file : `cp debian/control_ppa debian/control`
     # Change the changelog to support ubuntu codename. Look at the first line of the template changelog_ubuntu_lucid
     # Build the source package
        * New version: `dpkg-buildpackage -S -sa`
        * Update revision: `dpkg-buildpackage -S -sd`

----

= Install pcsx2 with ubuntu ppa =
=== Note ===
    Pcsx2 provides some ubuntu package through ppa. It is still experimental and it is only available on *32bits* OS. Moreover package are based on recent svn snapshot that are broken from time to time.

=== OS supported ===
    * 32 bits ubuntu 10.04
    * 32 bits ubuntu 10.10

=== Add pcsx2 ppa on your system ===
    * open a terminal
    * sudo add-apt-repository ppa:gregory-hainaut/pcsx2.official.ppa
 
=== Install the package on your system ===
    * Main package
      * pcsx2-unstable
      * pcsx2-data-unstable
      * pcsx2-plugins-unstable
    * Debug package
      * pcsx2-unstable-dbg
      * pcsx2-plugins-unstable-dbg