#summary A guide to compiling pcsx2 on Linux.

= Introduction =

This is intended to give you an idea of how to compile pcsx2 from svn in Linux. Some of the steps may be different on some versions of Linux, and this is not generally supported by the pcsx2 team. If you have issues following this guide, I'd reccommend going through this thread for help:
http://forums.pcsx2.net/thread-2373.html

This is loosely based on the compilation guide in that thread, though it should be more up to date.

Note: This is still a rough draft, and subject to change.

= Details (more or less DEPRECATED) =

First, there are various dependencies you will need. This is the list if you are using debian based distributions. Some of these may be named somewhat differently on other distributions:
  * libbz2-dev
  * libglew1.5-dev
  * libxxf86vm-dev
  * nvidia-cg-toolkit
  * libasound2-dev
  * joystick
  * libsdl1.2-dev
  * libgtk2.0-dev
  * autoconf
  * automake

Additionally, you will need gcc & g++. It currently expects gcc 4.3 or higher, though I may lower that requirement at some point.

Now, pcsx2 currently likes to reside in one folder. This may change in the future, but for now, go to the area you plan to have it reside.

now, in a terminal window, type the following:
`svn checkout http://pcsx2.googlecode.com/svn/trunk/ pcsx2-read-only`

Optional:
If you also want to use Zeydlitz's ZeroGS fork, ZZOgl, which I recommend, do the following:
go into the plugin folder.
Type:
`svn co http://sanechka.spb.ru/svnroot/ruslan/zerogs/ zzogl`
Then open the build.sh file in the plugin directory. If there is a # in front of `buildplugin zzogl $@`, remove it:

Now, go back to the pcsx2-read-only folder.

Type in the following command:
`sh build.sh all`

This should build pcsx2 and all plugins in the bin directory.

At this point, you can drop in your bios, and you should be set (though you'll need to configure everything the first time you open it, of course.)

Other useful things you can do from the pcsx2-read-only folder:

  * Typing `svn up` will update you to the latest svn (and doing the same thing in the zzogl folder updates zzogl).

  * Typing `svn up -r <revision number>` will roll your copy of pcsx2 back to the revision number you specify, in case a particular revision has something broken.

  * Typing `sh build.sh install`} will only compile the changes from the last version you compiled, which is quicker, though if you run into problems, run "sh build.sh all".

  * Typing `sh build.sh clean` is a good idea if none of the other `sh build.sh <something>` commands is working, as it'll get rid of all the extra accumulated object files, and might be enough to get `sh build.sh all` working again.

  * If you go into the build.sh file in pcsx2-read-only, you will note there are several lines that look like this:
  `#export PCSX2OPTIONS="--enable-sse3 --enable-sse4 --prefix `pwd`"`

  The # means its commented out. You can customize how it's built by changing which one is commented out, and changing the options passed to it. What all the options mean is probably beyond the scope of this document. 

  Generally, the Normal build is the one most users would use. 

  The Developer build adds special options for logging and such, usually used either by developers, or for reporting issues.

  The Debug build also turns off optimizations, and is a lot slower, but generally the most helpful version to use when reporting bugs to the devs.

----

= Cmake build system =

==*Warning it is experimental and not supported. The following informations are only a draft.*==

=== Debian build dependancy for futur version 0.9.7 ===

 # build system
   * gcc-4.3, gcc-4.3-multilib
   * g++-4.3, g++-4.3-multilib
   * cmake
 # 32 bits libraries on x86
   * liba52-0.7.4-dev
   * libasound2-dev
   * libbz2-dev
   * libgl1-mesa-dev
   * libglew1.5-dev
   * libglu1-mesa-dev
   * libgtk2.0-dev
   * libjpeg-dev
   * libsdl1.2-dev
   * libsoundtouch1-dev
   * libsparsehash-dev
   * libwxbase2.8-dev
   * libwxgtk2.8-dev
   * libx11-dev
   * libxxf86vm-dev
   * nvidia-cg-toolkit
   * portaudio19-dev
   * zlib1g-dev
 # 32 bits libraries on x86_64 (*NOT SUPPORTED & IMCOMPLETE*)
   * ia32-libs
   * ia32-libs-gtk
   * lib32asound2
   * lib32z1-dev

=== Using cmake ===

 ==== Build parameter that can be used: ====
  * Basic parameter:
     * Use Release/Devel/Debug       : -DCMAKE_BUILD_TYPE=Release|Devel|Debug
        # Release: Best in speed, but worst for debug
        # Devel: a tradeoff between Release and Debug  
        # Debug: no optimization. Very good for debug but slowwww
     * Enable/disable the stipping   : -DCMAKE_BUILD_STRIP=TRUE|FALSE
        # TRUE: Remove debugging information
        # FALSE: Keep symbol. Better for debug.
  * Expert parameter (not supported, the best is to use the default options):
     * Force all         internal lib : -DFORCE_INTERNAL_ALL=TRUE
     * Force soundtouch  internal lib : -DFORCE_INTERNAL_SOUNDTOUCH=TRUE
     * Force zlib        internal lib : -DFORCE_INTERNAL_ZLIB=TRUE
     * Tune C flags : -DUSER_CMAKE_C_FLAGS="cflags"
     * Tune C++ flags : -DUSER_CMAKE_CXX_FLAGS="cxxflags"

 ==== Running Cmake to generate the makefile: ====
  * It is advice to use an out-source-build. Easier to delete all cmake stuff.
    * mkdir my_build
    * cd my_build
    * cmake ../CMakeLists.txt "User Options see above"
  * The 'pollute my source' method is 
    * cmake CMakeLists.txt "User Options see above"
  * *WARNING* In both case you must call the CMakeLists.txt in the top directory.

 ==== Using the makefile to compile: ====
  * everything        : make
  * just pcsx2        : make pcsx2
  * just spu2x plugins: make spu2x
  * just a plugin     : make "plugin name"


=== Report Cmake bug ===
All distributions and configurations were not tested. In case you encounter a cmake bug that is really a cmake issue, you can report it. Please provide the following information.
  # Linux distribution and the current kernel version (32 bits or 64 bits)
  # The cmake commands. For example: cmake CMakeLists.txt
  # All the output of cmake. Something like that is good:
{{{
-- The C compiler identification is GNU
-- The CXX compiler identification is GNU
-- Check for working C compiler: /usr/bin/gcc
-- Check for working C compiler: /usr/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found GTK2_GTK: /usr/lib/libgtk-x11-2.0.so
-- Looking for XOpenDisplay in /usr/lib/libX11.so;/usr/lib/libXext.so
-- Looking for XOpenDisplay in /usr/lib/libX11.so;/usr/lib/libXext.so - found
-- Looking for gethostbyname
-- Looking for gethostbyname - found
-- Looking for connect
-- Looking for connect - found
-- Looking for remove
-- Looking for remove - found
-- Looking for shmat
-- Looking for shmat - found
-- Looking for IceConnectionNumber in ICE
-- Looking for IceConnectionNumber in ICE - found
-- Found X11: /usr/lib/libX11.so
-- Found ALSA: /usr/lib/libasound.so
-- Found BZip2: /usr/lib/libbz2.so
-- Looking for BZ2_bzCompressInit in /usr/lib/libbz2.so
-- Looking for BZ2_bzCompressInit in /usr/lib/libbz2.so - found
-- Looking for include files CMAKE_HAVE_PTHREAD_H
-- Looking for include files CMAKE_HAVE_PTHREAD_H - found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE
-- Found wxWidgets: TRUE
-- Found ZLIB: /usr/lib/libz.so
-- Found A52: /usr/lib/liba52.so
-- Found Cg: /usr/lib/libCg.so;/usr/lib/libCgGL.so
-- Found PortAudio: /usr/lib/libportaudio.so
-- Found SoundTouch: /usr/lib/libSoundTouch.so
-- Configuring done
-- Generating done
-- Build files have been written to: /mnt/playstation/emulateur/package/pcsx2.snapshot-3201

}}}

----
= Package build system =

=== Build a debian/ubuntu package ===
* NOT SUPPORTED * : Building a package is difficult. For non-expert user, I advise you to compile pcsx2 with [CompilationGuideForLinux#Using_cmake cmake].

For the purpose of the example, I use the version 3210 but it can be replaced with any later version. However in this situation some debian patches can be broken.
 
 ==== Install some additional package ====
     * dpkg-dev
     * quilt
     * debhelper
     * fakeroot

 ==== Get a source tarball ====
  First you need to create a tarball for the source package. A script is provided to do the job.
   # `svn export http://pcsx2.googlecode.com/svn/trunk/debian_unofficial/create_pcsx2_tarball_from_svn_repository.sh`
   # `./create_pcsx2_tarball_from_svn_repository.sh 3210`
   # Check that you have a pcsx2.snapshot_3210.orig.tar.gz tarball.
     
 ==== Update debian information ====
   Next step, add debian datas.
     # `tar -xzf pcsx2.snapshot_3210.orig.tar.gz`
     # `cd pcsx2.snapshot-3210`
     # `cp -r debian_unofficial debian`
     # Edit the file `debian/changelog` to change the origin version in the first line. You must also change the distribution codename. For example rev 3210 for debian unstable : "pcsx2.snapshot *(3210-1)* *unstable*; urgency=low"
   Apply the debian patches and correct them if needed
     # If you have the fglrx (ati/amd) drivers installed, you must use a special rule file to build the binary package: `cp debian/rules_fglrx debian/rules`
     # Check environment variable : QUILT_PATCHES=debian/patches
     # `while quilt push ; do quilt refresh ; done`
   In case of failure
     * Solution 1: easiest way
        # Remove the patch in the debian/patches/series
        # Go back to previous step 2. To apply others patches
     * Solution 2: fix the patch.
        # quilt push -f (Look at the .rej file)
        # Fix the code (before do a quilt add <file changed>
        # quilt refresh (update the patch)
        # Go back to previous step 2. To apply others patches

 ==== Build the package ====
   Everythings is clean, we can build the package without sign-it (-us -uc).
     # You can tune the build with the variable DEB_BUILD_OPTIONS. For example, disable optimization and use your quad-core cpu : DEB_BUILD_OPTIONS="parallel=4 noopt"
     # dpkg-buildpackage -rfakeroot -us -uc
  
=== Additional note for ubuntu ppa ===
     # Use the 32 bits control file : `cp debian/control_ppa debian/control`
     # Change the changelog to support ubuntu codename. Look at the first line of the template changelog_ubuntu_lucid
     # Build the source package
        * New version: `dpkg-buildpackage -S -sa`
        * Update revision: `dpkg-buildpackage -S -sd`