#summary Translating the PCSX2 User Interface

PCSX2 uses an enhanced version of the wxWidgets internationalization module, which itself is based around GNU's _gettext_ system.  I'll cover the basics of gettext first, and then apply the PCSX2 enhancements afterward.

==How gettext Works (sorta)==
GNU _gettext_ works by taking a program which is written in English, and finds the matching translated message in a language file (which is what you as a translator would be making).  This means that the actual English version of each message is specified directly in the code itself where the message is used, like so:
{{{
MessageBox( _('PCSX2 Critical Error'), _('Your game sucks and we refuse to emulate it properly.') );
}}}
... in the above example the `_()` portion is what invokes the GNU _gettext_ translator, and the strings inside the `_()` are what gettext uses to look up the translation.  The translation is stored in a language file which is given a *`*.mo`* extension type, and this file is created from a human-readable text database (clled a *`*.po`* file) which is typically generated by the gettext tool itself, and then updated by hand by the translator, using a text editor.

Fortunately there are tools now avilable to make editing `.po` files easier.  The recommended tool for creating and updating `.po` files is _Poedit_.  It's an open source app that makes using gettext (usually a terse command line tool) _almost_ a pleasurable experience.  Since I in fact have no earthly idea how to use gettext, and have only ever used Poedit, the rest of this quick tutorial will read as if Poedit is the only way to actually get the job done.

== PCSX2-specific Extension: Iconized gettext Identifiers ==
The gettext system has many conveniences over other methods of internationalization, which typically rely on the use of pre-processor macros or dynamically linked functions that return string values.  The main drawback is that this method relies on the _exact_ English representation, including punctuation, which means that even the slightest change to a text string in PCSX2 will break the translation for that string.  For most short messages, such as menu items and button labels, this is fine and is in fact desirable behavior.  But for longer messages that serve as descriptions of actions or checkbox options, some of which include formating to fit them to the dialog box more neatly, it can be problematic.  This is why PCSX2 has an extension to gettext that uses _iconized string matching_ instead ot the usual literal string matching.

=== How it Works ===
For especially long strings (such as dialog box option descriptions), or strings that contain newline or tab formatting, PCSX2 will use an iconized identifier for it's gettext lookup.  These are identified in the gettext database of messages via their '.' prefix.  It looks like this:
{{{
someCheckBox->SetToolTip( pxE( ".Tooltips:SomeOption", "This is some option which will make your game run a lot faster, but probably makes it uglier too." ) );
}}}
The first string is the icon, which reads `".Tooltips:SomeOption"`.  The second string is the current English literal translation.  Poedit will show you the iconized version in its messages list, and you will need to open the source code reference for it to see what the current English translation is.

Mmessage icons use a somewhat standard naming convention which will help you decide what's important for translating and/or what sort of formatting you should apply to the message.  Some of the common icon classes are:
  * *Dialog* – This is a top-level message on a dialog box.  These have a very high translation priority.
  * *ToolTip* – These are tips that appear over toolbar buttons.  Since button images are rarely fully self-explanatory these types of messages should be translated, so they have a high translation priority.  (typically most or all such tooltips won't be iconized anyway, but I'm leaving the door open in case some woul be better suited as such).
  * *MsgBox* – Messages that are popped up to the user for errors or confirmations.  High Priority.
  * *ContextTip* – This is a popup box that gives additional extra information or details about various options on dialog boxes.  Because these are usually supplementary to the dialog box option name and top-level description, translating them is not really necessary for someone to use the program.  Translation priority is low.


Using Poedit: Step-by-Step

`[ ... TODO ... ]`
