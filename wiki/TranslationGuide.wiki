#summary Guide for Translating PCSX2


PCSX2 uses an enhanced version of the wxWidgets internationalization module, which itself is based around GNU's _gettext_ system.  I'll cover the basics of gettext first, and then apply the PCSX2 enhancements afterward.

==How gettext Works (sorta)==
GNU _gettext_ works by taking a program which is written in English, and finds the matching translated message in a language file (which is what you as a translator would be making).  This means that the actual English version of each message is specified directly in the code itself where the message is used, like so:
{{{
MessageBox( _('PCSX2 Critical Error'), _('Your game sucks and we refuse to emulate it properly.') );
}}}
... in the above example the `_()` portion is what invokes the GNU _gettext_ translator, and the strings inside the `_()` are what gettext uses to look up the translation.  The translation is stored in a language file which is given a *`*.mo`* extension type, and this file is created from a human-readable text database (clled a *`*.po`* file) which is typically generated by the gettext tool itself, and then updated by hand by the translator, using a text editor.

Fortunately there are tools now avilable to make editing `.po` files easier.  The recommended tool for creating and updating `.po` files is _Poedit_.  It's an open source app that makes using gettext (usually a terse command line tool) _almost_ a pleasurable experience.  Since I personally have no earthly idea how to use gettext, and have only ever used Poedit, the rest of this quick tutorial will read as if Poedit is the only way to actually get the job done.

See our UsingPoedit page for details on how to download, install, and configure Poedit.

== PCSX2-specific Extension: Iconized gettext Identifiers ==
The gettext system has many conveniences over other methods of internationalization, which typically rely on the use of pre-processor macros or dynamically linked functions that return string values.  The main drawback is that this method relies on the _exact_ English representation, including punctuation, which means that even the slightest change to a text string in PCSX2 will break the translation for that string.  For most short messages, such as menu items and button labels, this is fine and is in fact desirable behavior.  But for longer messages that serve as descriptions of actions or checkbox options, some of which include formating to fit them to the dialog box more neatly, it can be problematic.  This is why PCSX2 has an extension to gettext that uses _iconized string matching_ instead ot the usual literal string matching.

=== How String Iconization Works ===
For especially long strings (such as dialog box option descriptions), or strings that contain newline or tab formatting, PCSX2 will use an iconized identifier for it's gettext lookup.  These are identified in the gettext database of messages via their '!' prefix, which was chosen to help search and sort for these messages.  Because this is a special PCSX2 extension to GNU gettext, you will need to reference the PCSX2 source code when translating them.  You should probably be referencing source code during translation as a generla habit anyway, since the source code gives good hints as to the context of messages.

When referencing the source code, these iconized translation messages are used like so:

{{{
someCheckBox->SetToolTip( pxE( "!ContextTip:SomeOption", L"This is some option which will make your game run a lot faster, but probably makes it uglier too." ) );
}}}
The first string is the icon, which reads `"!Tooltips:SomeOption"`.  The second string is the current English literal translation.  Poedit will show you the iconized version in its messages list, and you will need to open the source code reference for it to see what the current English translation is.  It is important that your PoEdit options are set up properly so that viewing the PCSX2 program source code works.

Message icons use a somewhat standard naming convention which will help you decide what's important for translating and/or what sort of formatting you should apply to the message.  The common classes are:
  * *Popup* – Messages that are popped up to the user for errors or confirmations.  Very High Priority!
  * *Panel* – This is a top-level message on a dialog box or panel.  These have a high translation priority.
  * *Tooltip* – These are tips that appear over toolbar buttons.  Since button images are rarely fully self-explanatory these types of messages should be translated, so they have a high translation priority.  (typically most or all such tooltips won't be iconized anyway, but I'm leaving the door open in case some would be better suited as such).
  * *ContextTip* – This is a popup box that gives additional extra information or details about various options on dialog boxes.  Because these are usually supplementary to the dialog box option name and top-level description, translating them is not really necessary for someone to use the program.  Translation priority is low.

==Multiple POT files in PCSX2==

To assist translators, PCSX2 text messages have been split into a handful of different POT files, as follows:

 * `pcsx2_main` - menu items, buttons, and most labels.  High priority; most or all of this file should be translated for a translation to be considered useful.
 * `pcsx2_iconized` - iconized notices, popups, and errors.  Most of these are also very high priority; and most or all of this file should be translated for a translation to be considered useful.
 * `pcsx2_tertiary` - Context tips, wizards, and other non-critical user interface elements.  All of these strings are also in iconized form.

Only the main PO is required for PCSX2 to detect and use a language.  Iconized and tertiary POs are optional.  All strings in the iconized and tertiary POTs are iconized, and you will have to reference the source code to obtain the original English text.  For these files, it is highly recommended that you use Poedit.  All strings in pcsx2_main.pot are standard gettext strings, and can be translated easily using any regular text editor. 

===Uploading your contribution===

You may submit new translations, or updates to existing translations, as _issue reports_.  When filing an issue for a translation update, post either the actual PO file archive you have created, or a patchfile that can be applied against the current svn copy of the translation.  Please search for an issue corresponding to your language before creating a new issue, and post contributions to the existing issue if possible.

For those of you who are familiar and comfortable with Subversion (SVN): The PCSX2 Team hosts all available translations from our googlecode repository.  Available translations and their submission history can be viewed online at [https://code.google.com/p/pcsx2/source/browse/#svn/translations].  Translations are branched according to the releases of PCSX2 that they conform to.  You can also use an Svn tool such as [http:// TortoiseSvn] to perform more detailed commit history analysis.
