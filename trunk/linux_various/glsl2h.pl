#!/usr/bin/perl

use strict;
use warnings;
use File::Spec;
use File::Basename;
use File::Copy;
use Cwd 'abs_path';

use Digest::file qw/digest_file_hex/;
use Digest::MD5 qw(md5_hex);

my @res = qw/convert interlace merge shadeboost tfx/;
my $path = File::Spec->catdir(dirname(abs_path($0)), "..", "plugins", "GSdx", "res");

foreach my $r (@res) {
    glsl2h($path, $r, "glsl");
}
glsl2h($path, "fxaa", "fx");

my $zz_path = File::Spec->catdir(dirname(abs_path($0)), "..", "plugins", "zzogl-pg", "opengl");
glsl2h($zz_path, "ps2hw_gl4", "glsl");

sub glsl2h {
    my $path = shift;
    my $glsl = shift;
    my $ext  = shift;

    my $in = File::Spec->catfile($path, "${glsl}.$ext");
    my $out = File::Spec->catfile($path, "${glsl}.h");
    open(my $GLSL, "<$in") or die;

    my $data = "";

    my $include = "";
    if ($in =~ /GSdx/) {
        $include = "#include \"stdafx.h\""
    }

    my $header = <<EOS;
/*
 *  This file was generated by glsl2h.pl script
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with GNU Make; see the file COPYING.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA USA.
 *  http://www.gnu.org/copyleft/gpl.html
 *
 */

#pragma once

$include

static const char* ${glsl}_${ext} =
EOS

    $data = $header;

    my $line;
    while(defined($line = <$GLSL>)) {
        chomp $line;
        $line =~ s/\\/\\\\/g;
        $line =~ s/"/\\"/g;
        $data .= "\t\"$line\\n\"\n";
    }
    $data .= "\t;\n";

    # Rewriting the file will trigger a relink (even if the content is the
    # same). So we check first the content with md5 digest
    my $old_md5 = digest_file_hex($out, "MD5");
    my $new_md5 = md5_hex($data);

    if ($old_md5 ne $new_md5) {
        open(my $H, ">$out") or die;
        print $H $data;
    }
}
